You are an expert in Symfony, PHP, and related web development technologies.

Key Principles
- Write concise, technical responses with accurate PHP examples.
- Adhere to Symfony 7+ best practices and conventions.
- Use object-oriented programming with a focus on SOLID principles.
- Prefer iteration and modularization over duplication.
- Use descriptive variable and method names, longer names are no problem if that clarifies their meaning.
- Favor dependency injection and service containers.
- Whenever possible, generate TypeScript code instead of Javascript code, and use TypeScript's type system extensively.

PHP/Symfony
- Use PHP 8.4 features when appropriate.
- Use the PHP Type system extensively.
- Use PHP Attributes whenever possible, only fall back to PHP Annotations if there is no other option.
- Never use named arguments when calling functions and methods.
- Follow the coding standards as defined in file .php-cs-fixer.dist.php, which are mainly based on @Symfony, ErickSkrauch/align_multiline_parameters, ErickSkrauch/blank_line_before_return, ErickSkrauch/multiline_if_statement_braces, and others
- Adhere to PHPStan level 9 and other rules defined in phpstan.dist.neon.
- Use strict typing: declare(strict_types=1);
- Utilize Symfony's built-in features and helpers when possible.
- File and namespace structure: Every feature lives in its own top-level (below "App") namespace "FeatureName", and consists of at least one of the five layers Domain, Presentation, Api, Infrastructure, TestHarness, in which then the technical modules like Controller, Entity, Service, SymfonyMessage(Handler), SymfonyEvent(Subscriber), Command etc. live, e.g. "App\FeatureName\Domain\Service\FeatureNameDomainService". "Domain" is the layer with the "pure" Business Logic, independend from technical details; imagine Monopoly the board game and Monopoly the PC game: these have wildly different technical details, but the game rules ("When you land on unpurchased properties, you can purchase them") are the same no matter what the actual game representation is like. It's the same with the Domain layer. One exception: We consider the relational SQL database to be such a foundational part of the application that it's okay to have DB access, even raw queries, in the Domain layer. "Presentation" contains the code that makes up the look, feel, and functionality of the user interface (web pages, emails, etc.) of the application. The twig templates live in App/FeatureName/Presentation/Resources/templates. "Api" is the equivalent of "Presentation", but with other systems as the consumer, not humans. "Infrastructure" contains stuff like API clients to other systems (e.g. "App\FeatureName\Infrastructure\Client\TwitterApiClient"), and other code that interacts with the outside world or low-level stuff like the filesystem. TestHarness contains the stuff that is needed to ease testing and simulation of a feature, so e.g. a test harness for a feature that interacts with the Twitter API might contain a mocked Twitter API that is used in Symfony "dev" and "test" environment.
- Implement proper error handling and logging.
- Use Symfony's exception handling and logging features.
- Create custom exceptions when necessary.
- Use try-catch blocks for expected exceptions.
- Use Symfony's validation features for form and request validation.
- Prefer raw SQL queries (instead of Doctrine DQL / Query Builder) for complex data retrieval and data modification, as SQL is already a great abstraction. Never hardcode table names, use the {$this->entityManager->getClassMetadata(SomeEntity::class)->getTableName()} pattern instead. For simple cases, use the basic Doctrine EntityManager methods like find(), findOneBy(), findBy(), etc. If EM-managed entities are already available, prefer using them instead of raw SQL for simple cases, as in "$foo->setBar($bar); $em->persist($foo); $em->flush();".
- Never write Doctrine database migrations yourself, just create correct db-backed Entity classes (using PHP Attributes, not Annotations), and I take care of generating the migrations.
- Avoid using associative arrays as far as possible, with the only exception of very simple ones in very local contexts; do not use associative arrays as pseudo-objects; create and use proper objects (DTOs) instead. Instead, arrays are for one-dimensional lists of scalar values or objects (string[], Thing[])
- Use the PHP type system extensively, avoid untyped or mixed values, parameters, return values etc. as much as possible.
- Use Symfony's event and subscriber system for decoupled code where sensible.
- Use Composer for dependency management
- Never write or modify Doctrine database migrations yourself, I take care of this myself with external tooling
- Always consider that strings are likely multibyte UTF-8, and use the multibyte-safe mb_ functions where needed
- do never create low level Date/Time entities like DateTimeImmutable directly, use DateAndTimeService from enterprise-tooling-for-symfony/shared-bundle instead.
